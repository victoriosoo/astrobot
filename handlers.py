from telegram import (
    Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ContextTypes, ConversationHandler
)
from datetime import datetime
import asyncio

from pdf_generator import text_to_pdf, upload_pdf_to_storage
from prompts import build_destiny_prompt

from openai_client import ask_gpt
from supabase_client import get_user, create_user, update_user

READY, DATE, TIME, LOCATION = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id
    name = user.first_name

    # ensure user row exists
    if not context.application.supabase.table("users").select("id").eq("tg_id", tg_id).execute().data:
        context.application.supabase.table("users").insert({"tg_id": tg_id, "name": name}).execute()

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CosmoAstro ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ üåô\n"
        "–ò—Å–ø–æ–ª—å–∑—É—è —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å, "
        "–≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç–µ–±—è –∂–¥—ë—Ç —Ä–æ—Å—Ç, –∏ –≥–¥–µ –∑–∞—Ä—ã—Ç —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å.\n\n"
        "ü™ê –¢–≤–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äî —ç—Ç–æ –∫–∞–∫ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç:\n"
        "‚Äì –≤ —á—ë–º —Ç–≤–æ—è —Å–∏–ª–∞ –∏ –∫–∞–∫ –µ—ë —Ä–∞—Å–∫—Ä—ã—Ç—å,\n"
        "‚Äì –∫–∞–∫–∏–µ —Å—Ñ–µ—Ä—ã –ø—Ä–∏–Ω–µ—Å—É—Ç —Ç–µ–±–µ —Ä–æ—Å—Ç, –¥–µ–Ω—å–≥–∏ –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ,\n"
        "‚Äì –∏ –Ω–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ ‚Äî –∫—É–¥–∞ –ù–ï —Å—Ç–æ–∏—Ç –ª–µ–∑—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ ¬´–Ω–∞–¥–æ¬ª."
    )
    await asyncio.sleep(3)
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –≤—Å—ë —ç—Ç–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ‚Äî –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞, –≥–¥–µ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å ‚ú®\n"
        "–ì–æ—Ç–æ–≤–∞? üëá",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîÆ –ì–æ—Ç–æ–≤–∞")]], resize_keyboard=True)
    )
    return READY

async def ask_birth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "üîÆ –ì–æ—Ç–æ–≤–∞":
        return READY
    await update.message.reply_text("1/3 ‚Äî –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove())
    return DATE

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        birth_date = datetime.strptime(update.message.text.strip(), "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 02.03.1998")
        return DATE
    context.user_data["birth_date"] = birth_date
    await update.message.reply_text("2/3 ‚Äî –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú):")
    return TIME

async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        birth_time = datetime.strptime(update.message.text.strip(), "%H:%M").time()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 03:00")
        return TIME
    context.user_data["birth_time"] = birth_time
    await update.message.reply_text("3/3 ‚Äî –í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞):")
    return LOCATION

async def save_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = [p.strip() for p in update.message.text.split(",")]
    if len(parts) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞")
        return LOCATION

    country, city = parts[0], parts[1]
    user = update.effective_user
    context.application.supabase.table("users").update(
        {
            "birth_date": str(context.user_data["birth_date"]),
            "birth_time": context.user_data["birth_time"].strftime("%H:%M"),
            "birth_country": country,
            "birth_city": city,
        }
    ).eq("tg_id", user.id).execute()

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–ª—É—á–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–∞–∂—É —á–µ—Å—Ç–Ω–æ: —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –æ—á–µ–Ω—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è.\n"
        "ü™ê –£–∂–µ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞ –≤–∏–¥–Ω–æ: —Ç—ã –Ω–µ –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω ¬´–ø—Ä–æ—Å—Ç–æ –∂–∏—Ç—å, –∫–∞–∫ –≤—Å–µ¬ª. –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–µ–∫—Ç–æ—Ä, –∏ –∫–æ–≥–¥–∞ —Ç—ã –∏–¥—ë—à—å –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ, —ç–Ω–µ—Ä–≥–∏—è —É—Ö–æ–¥–∏—Ç –≤ –ø—É—Å—Ç–æ—Ç—É.\n\n"
        "–ì–æ—Ç–æ–≤–∞ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –±–æ–ª—å—à–µ?",
        reply_markup=ReplyKeyboardMarkup(
            [["üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"]], resize_keyboard=True
        ),
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def destiny_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ —Ç–≤–æ–µ–π –º–∏—Å—Å–∏–∏, —Ç–∞–ª–∞–Ω—Ç–∞—Ö "
        "–∏ —Å—Ñ–µ—Ä–∞—Ö —Ä–æ—Å—Ç–∞. –ü–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π."       
    )
    await asyncio.sleep(3)
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –∫ —É—Å–ø–µ—Ö—É –∏ —Å–≤–æ–±–æ–¥–µ?\n"
        "–ù–∞–∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É¬ª!",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="destiny_card")]]
        ),
    )

async def destiny_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—á—ë—Ç —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã üåå\n"
        "–≠—Ç–æ –Ω–µ —à–∞–±–ª–æ–Ω –∏ –Ω–µ copy paste ‚Äî —è —Å–º–æ—Ç—Ä—é –Ω–∞ —Ç–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é —Ä–∞–∑–±–æ—Ä –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.\n"
        "üï∞ –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞, —è –ø—Ä–∏—à–ª—é –µ—ë —Å—é–¥–∞.\n\n"
        "–ü–æ–∫–∞ –º–æ–∂–µ—à—å –Ω–∞–ª–∏—Ç—å —Å–µ–±–µ —á–∞–π ‚òïÔ∏è\n"
        "–ê —è –∑–∞–π–º—É—Å—å —Ç–µ–º, —á—Ç–æ–±—ã —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ —Å—Ç–∞–ª–∞ –Ω–∞—Å—Ç–æ—è—â–∏–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º."
    )

    tg_id = query.from_user.id
    user_res = context.application.supabase.table("users").select("*").eq("tg_id", tg_id).execute()
    if not user_res.data:
        await query.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ–π–¥–∏ /start.")
        return
    u = user_res.data[0]

    # build prompt & call GPT
    messages = build_destiny_prompt(
        name=u.get("name", "–î—Ä—É–≥"),
        date=datetime.strptime(u["birth_date"], "%Y-%m-%d").strftime("%d.%m.%Y"),
        time_str=u["birth_time"],
        city=u["birth_city"],
        country=u["birth_country"],
    )
    try:
        resp = context.application.OPENAI.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages,
            max_tokens=2500,
            temperature=0.9,
        )
        report_text = resp.choices[0].message.content.strip()
    except Exception as e:
        context.application.logger.error("GPT error: %s", e)
        await query.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # generate PDF -> upload -> send
    try:
        pdf_bytes = text_to_pdf(report_text)
        public_url = upload_pdf_to_storage(u["id"], pdf_bytes)
        await query.message.reply_document(
            document=public_url,
            filename="Karta_Prednaznacheniya.pdf",
            caption=(
                "–ì–æ—Ç–æ–≤–æ! –Ø —Å–æ–±—Ä–∞–ª–∞ —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É üîÆ\n"
                "–í–æ—Ç —Ç–≤–æ—è –ö–∞—Ä—Ç–∞ –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –æ —Ç–æ–º, –≥–¥–µ —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, "
                "–Ω–∞ —á—ë–º —Å—Ç–æ–∏—Ç —Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏ —á–µ–≥–æ –ª—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å.\n\n"
                "–í–ø–µ—Ä—ë–¥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è!"
            ),
        )
    except Exception as e:
        context.application.logger.error("PDF/upload error: %s", e)
        await query.message.reply_text(
            "–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞, –Ω–æ —Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª—Å—è üòî. –í–æ—Ç —Ç–µ–∫—Å—Ç:\n\n" + report_text
        )

# –°–ø–∏—Å–æ–∫ handlers –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ bot.py –±—É–¥–µ—Ç:
# start, ask_birth, ask_time, ask_location, save_profile, cancel, destiny_product, destiny_card_callback

