from telegram import (
    Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ContextTypes, ConversationHandler
)
from datetime import datetime
import asyncio
import os

from stripe_client import create_checkout_session

from pdf_generator import text_to_pdf, upload_pdf_to_storage
from prompts import build_destiny_prompt_part1, build_destiny_prompt_part2, build_solyar_prompt_part1, build_solyar_prompt_part2, build_income_prompt_part1, build_income_prompt_part2, build_compatibility_prompt_part1, build_compatibility_prompt_part2
from openai_client import ask_gpt
from supabase_client import get_user, create_user, update_user

READY, DATE, TIME, LOCATION = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id
    name = user.first_name

    # ensure user row exists
    if not get_user(tg_id):
        create_user(tg_id, name)

    static_path = os.path.join(os.path.dirname(__file__), "static")
    animation_path = os.path.join(static_path, "cat_intro.mp4")
    await update.message.reply_animation(
        animation=open(animation_path, "rb"),
        caption=(
            "–ú—è—É, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –Ω–∞ –∑–≤—ë–∑–¥–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏! –Ø ‚Äî –ö–æ—Ç –ê—Å—Ç—Ä–æ–ö–æ—Ç, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ –≤—Å–µ–ª–µ–Ω—Å–∫–∏–º –¥–æ—Ä–æ–≥–∞–º. üêà‚Äç‚¨õ\n"
            "–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ç, —è —á–µ—Ä–Ω—ã–π –∫–∞–∫ —Å–∞–º–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –Ω–æ—á—å, –∞ –µ—â—ë —É–º–µ—é —á–∏—Ç–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã.\n"
            "–ú—è—É! –ì–æ—Ç–æ–≤ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–∞–ª–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É. –°—á–∏—Ç–∞–π –º–µ–Ω—è —Å–≤–æ–∏–º –∑–≤–µ–∑–¥–Ω—ã–º —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–º."
        )
    )

    await asyncio.sleep(2)
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –≤—Å—ë —ç—Ç–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ‚Äî –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞, –≥–¥–µ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ä–æ–¥–∏–ª—Å—è(–ª–∞—Å—å) ‚ú®\n"
        "–ì–æ—Ç–æ–≤(–∞)? üëá",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîÆ –ì–æ—Ç–æ–≤–∞")]], resize_keyboard=True)
    )
    return READY

async def ask_birth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "üîÆ –ì–æ—Ç–æ–≤–∞":
        return READY
    await update.message.reply_text("1/3 ‚Äî –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫–æ–≥–¥–∞ –∂–µ —Ç—ã –ø–æ—è–≤–∏–ª—Å—è(–∞—Å—å) –Ω–∞ —Å–≤–µ—Ç! –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):\n"
    "(–î–∞-–¥–∞, —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω—É–∂–Ω–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç, –Ω–æ –∏ —á—Ç–æ–±—ã –∫–æ—Ç-–∞—Å—Ç—Ä–æ–ª–æ–≥ –Ω–µ –æ—à–∏–±—Å—è –≤ —Ä–∞—Å—á—ë—Ç–∞—Ö!)", reply_markup=ReplyKeyboardRemove())
    return DATE

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        birth_date = datetime.strptime(update.message.text.strip(), "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("–•–≤–æ—Å—Ç–æ–º —á—É—é, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02.03.1998).\n–û–±–µ—â–∞—é, –Ω–∏–∫–æ–º—É –Ω–µ —Å–∫–∞–∂—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–ø—É—Ç–∞–µ—à—å –µ—â—ë —Ä–∞–∑ ‚Äî –¥–∞–∂–µ –º—ã—à–∞–º!")
        return DATE
    context.user_data["birth_date"] = birth_date
    await update.message.reply_text("2/3 ‚Äî –ê —Ç–µ–ø–µ—Ä—å –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n"
    "–¢—É—Ç —É–∂ –Ω–µ –æ–±–º–∞–Ω–µ—à—å: –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—Ç–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É ¬´—É—Ç—Ä–æ–º¬ª –∏ ¬´–Ω–æ—á—å—é¬ª ‚Äî –∫–∞–∫ –º–µ–∂–¥—É —Å–≤–µ–∂–∏–º –∏ –≤—á–µ—Ä–∞—à–Ω–∏–º –∫–æ—Ä–º–æ–º!")
    return TIME

async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        birth_time = datetime.strptime(update.message.text.strip(), "%H:%M").time()
    except ValueError:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ —Ç—ã –Ω–∞–ø—É—Ç–∞–ª —Å —Ñ–æ—Ä–º–∞—Ç–æ–º! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ ‚Äî –Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 03:00.\n"
        "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –¥–∞–∂–µ —É –∫–æ—Ç–æ–≤ –±—ã–≤–∞—é—Ç –æ—à–∏–±–∫–∏ —Å –±—É–¥–∏–ª—å–Ω–∏–∫–æ–º.")
        return TIME
    context.user_data["birth_time"] = birth_time
    await update.message.reply_text("3/3 ‚Äî –ù—É –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ! –ù–∞–ø–∏—à–∏ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥, –≥–¥–µ —Ç–µ–±—è –≤–ø–µ—Ä–≤—ã–µ —É–≤–∏–¥–µ–ª–∏ –∑–≤—ë–∑–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞):\n"
    "–í–¥—Ä—É–≥ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–≤–æ–µ–π –∫–æ—à–∞—á—å–µ–π —Ö–∞—Ä–∏–∑–º—ã?")
    return LOCATION

async def save_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = [p.strip() for p in update.message.text.split(",")]
    if len(parts) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞")
        return LOCATION

    country, city = parts[0], parts[1]
    user = update.effective_user
    update_user(
        user.id,
        birth_date=str(context.user_data["birth_date"]),
        birth_time=context.user_data["birth_time"].strftime("%H:%M"),
        birth_country=country,
        birth_city=city,
    )

    await update.message.reply_text(
        "–õ–æ–≤–ª—é —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–∞–º–∏! –ú—è—É ‚Äî –∫–∞—Ä—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è, —Ç—É—Ç –Ω–µ –ø–∞—Ö–Ω–µ—Ç —Å–∫—É–∫–æ–π. –ó–≤—ë–∑–¥—ã –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —Ç—ã —è–≤–Ω–æ –Ω–µ –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–µ–º –∑–∞ –≤—Å–µ–º–∏.\n"
        "–ë—ã–≤–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ —É–π—Ç–∏ –Ω–µ –ø–æ —á—É–∂–∏–º —Å–ª–µ–¥–∞–º, –∞ –∑–∞–±—Ä–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫, –≥–¥–µ —Å–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è? –í–æ—Ç –∏–º–µ–Ω–Ω–æ, —É —Ç–µ–±—è –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ç—è–≥–∞ –∏—Å–∫–∞—Ç—å —Å–≤–æ–∏ —É—é—Ç–Ω—ã–µ —É–≥–æ–ª–∫–∏, –∞ –Ω–µ —Ç–æ–ø—Ç–∞—Ç—å—Å—è —Å —Ç–æ–ª–ø–æ–π.\n\n"
        "–ì–æ—Ç–æ–≤(–∞) —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∫–æ—Ç—ã –∑–≤—ë–∑–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–≤–∏–¥–µ–ª–∏ –≤ —Ç–≤–æ–µ–π —Å—É–¥—å–±–µ?",
    )
    await asyncio.sleep(2)
    await main_menu(update, context)
    return ConversationHandler.END

async def main_menu(update, context):
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π —Ä–∞–∑–±–æ—Ä —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"],["üó∫Ô∏è –ì–æ–¥–æ–≤–æ–π –ø—É—Ç—å (–°–æ–ª—è—Ä)"],
                ["üí∏ –ö–∞—Ä—å–µ—Ä–∞ –∏ –¥–æ—Ö–æ–¥"],["üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"]
            ],
            resize_keyboard=True
        ),
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def destiny_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("CALLBACK TRIGGERED", flush=True)
    await update.message.reply_text(
        "–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±—É–º–∞–∂–∫–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Ç–æ-–∫–æ–º–ø–∞—Å –ø–æ —Ç–≤–æ–µ–π —Å—É–¥—å–±–µ!\n"
        "–° –Ω–µ–π —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫–∏–µ —Ç–∞–ª–∞–Ω—Ç—ã —É —Ç–µ–±—è –≤ –ª–∞–ø–∞—Ö —Å —Ä–æ–∂–¥–µ–Ω–∏—è, –≥–¥–µ –ø—Ä—è—á—É—Ç—Å—è —Ç–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤—ã –∏ –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –ª—é–±–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Ç–µ—Å–Ω–æ–π.\n"
        "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å: —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, –∫—É–¥–∞ —Å—Ç–æ–∏—Ç –≤—ã–ø—É—Å—Ç–∏—Ç—å –∫–æ–≥—Ç–∏, –∞ –∫—É–¥–∞ –ª—É—á—à–µ –∏–¥—Ç–∏, –º—è–≥–∫–æ —Å—Ç—É–ø–∞—è –ø–æ –º–æ—Ö–Ω–∞—Ç–æ–π –¥–æ—Ä–æ–∂–∫–µ.\n"
        "–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤(–∞) —É–∑–Ω–∞—Ç—å, –∫—É–¥–∞ —Ç–µ–±—è –∑–æ–≤—É—Ç –∑–≤—ë–∑–¥—ã –∏ –∫–æ—Ç–æ-–∞—Å—Ç—Ä–æ–ª–æ–≥?"
        "\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–±–æ—Ä–∞ ‚Äî 4.99‚Ç¨. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É"],
                ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]            
            ], resize_keyboard=True
        ),
    )

async def solyar_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üó∫Ô∏è –ì–æ–¥–æ–≤–æ–π –ø—É—Ç—å  ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥!\n"
        "–ü—É—Ç—å –ø–æ–∫–∞–∂–µ—Ç:\n"
        "‚Ä¢ –ì–ª–∞–≤–Ω—É—é —Ç–µ–º—É –∏ –∑–∞–¥–∞—á—É –≥–æ–¥–∞\n"
        "‚Ä¢ –í –∫–∞–∫–∏—Ö —Å—Ñ–µ—Ä–∞—Ö —Ç–µ–±—è –∂–¥—ë—Ç —Ä–æ—Å—Ç, –∞ –≥–¥–µ ‚Äî –≤—ã–∑–æ–≤—ã\n"
        "‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –∫—Ä–∏–∑–∏—Å—ã –∏ –ª—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –ª—É—á—à–µ –Ω–∞—á–∏–Ω–∞—Ç—å –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –∞ –∫–æ–≥–¥–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å –∏ –Ω–∞–±–∏—Ä–∞—Ç—å—Å—è —Å–∏–ª\n"
        "‚Ä¢ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–∞–¥—ã –∏ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏\n\n"
        "–≠—Ç–æ –∫–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∫–∞—Ä—Ç–∞, –≥–¥–µ –æ—Ç–º–µ—á–µ–Ω—ã –≥–ª–∞–≤–Ω—ã–µ –¥–æ—Ä–æ–≥–∏, –ø–æ–≤–æ—Ä–æ—Ç—ã –∏ –¥–∞–∂–µ –∫–æ—à–∞—á—å–∏ —Ç—Ä–æ–ø–∫–∏, –≤–µ–¥—É—â–∏–µ –∫ —É—Å–ø–µ—Ö—É! üêæ\n\n"
        "–ì–æ—Ç–æ–≤(–∞) —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä—ë–¥?"
        "\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–±–æ—Ä–∞ ‚Äî 4.99‚Ç¨. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–ü–æ–ª—É—á–∏—Ç—å —Å–æ–ª—è—Ä"],
                ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ],
            resize_keyboard=True
        ),
    )
async def income_product(update, context):
    await update.message.reply_text(
        "üí∏ –ö–∞—Ä—å–µ—Ä–∞ –∏ –¥–æ—Ö–æ–¥ ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤, –±–ª–æ–∫–æ–≤ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤!\n"
        "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:\n"
        "‚Ä¢ –û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ –¥–µ–Ω—å–≥–∞–º –∏ –∫–∞—Ä—å–µ—Ä–µ\n"
        "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –¥–µ–Ω–µ–∂–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã: —Ñ—Ä–∏–ª–∞–Ω—Å, –Ω–∞–π–º, –±–∏–∑–Ω–µ—Å\n"
        "‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä: –∫—É–¥–∞ –∏–¥—Ç–∏, –≥–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ –õ—É—á—à–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ–≤—ã—à–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–æ–≤\n"
        "‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ –±–ª–æ–∫–∏ ‚Äî —á—Ç–æ –º–µ—à–∞–µ—Ç —Ä–∞—Å—Ç–∏\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –º–∏–Ω–∏-—á–µ–∫–ª–∏—Å—Ç\n\n"
        "–ü–æ—á—É–≤—Å—Ç–≤—É–π, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å —Å–≤–æ–π –¥–æ—Ö–æ–¥ –∏ –∫–∞—Ä—å–µ—Ä—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–ª—ã–≤—ë—à—å –ø–æ —Ç–µ—á–µ–Ω–∏—é. –ú—è—É!\n\n"
        "–ì–æ—Ç–æ–≤(–∞) —É–∑–Ω–∞—Ç—å —Ä–∞–∑–±–æ—Ä —Å–≤–æ–µ–π –¥–µ–Ω–µ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã?"
        "\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–±–æ—Ä–∞ ‚Äî 4.99‚Ç¨. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä –∫–∞—Ä—å–µ—Ä—ã"],
                ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ],
            resize_keyboard=True
        ),
    )
async def compatibility_product(update, context):
    await update.message.reply_text(
        "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —à—Ç–∞–º–ø ¬´–ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∏–ª–∏ –Ω–µ—Ç¬ª, –∞ –∫–æ—Ç–æ-—Ä–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –≥–¥–µ –∫–∞–∂–¥–∞—è –ø–æ–ª–æ—Å–∫–∞ —à–µ—Ä—Å—Ç–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
        "–≠—Ç–æ—Ç —Ä–∞–∑–±–æ—Ä –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —É –≤–∞—Å –≤ –ª–∞–ø–∞—Ö, –∫—Ç–æ –º—É—Ä–ª—ã—á–µ—Ç –æ—Ç –∑–∞–±–æ—Ç—ã, –∞ –∫—Ç–æ –∏–Ω–æ–≥–¥–∞ —à–∏–ø–∏—Ç –æ—Ç –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è. –Ø –∏–∑—É—á—É –≤–∞—à–∏ –∑–≤—ë–∑–¥–Ω—ã–µ –∞—Å—Ç—Ä–æ–ø—Ä–æ—Ñ–∏–ª–∏: –Ω–∞–π–¥—É, –≥–¥–µ –∏—Å–∫—Ä–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è, –∞ –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Ç–∞—Ç—å—Å—è –≤ –∫–ª—É–±–∫–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π.\n"
        "–í—ã —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ –≤–º–µ—Å—Ç–µ –æ–±—É—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –∫–æ—à–∞—á–∏–π —É—é—Ç, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–º–Ω–µ–º –ø—Ä–µ—Ç–∫–Ω–æ–≤–µ–Ω–∏—è, –∏ –∫–∞–∫ –≤–º–µ—Å—Ç–µ –æ–±–æ–π—Ç–∏ –ª—É–∂–∏ –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è.\n"
        "–†–∞–∑–±–æ—Ä –¥–∞—Å—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω—É –≤–∞—à–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–≤, –Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: –∫–æ–≥–¥–∞ –ø–æ–≥–ª–∞–¥–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø—Ä–æ—Ç–∏–≤ —à–µ—Ä—Å—Ç–∏, –∞ –∫–æ–≥–¥–∞ –≤–º–µ—Å—Ç–µ –ø—Ä—ã–≥–∞—Ç—å –∑–∞ –æ–¥–Ω–æ–π –º–µ—á—Ç–æ–π. –ú—è—É!\n\n"
        "–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤(–∞) —É–∑–Ω–∞—Ç—å, —á—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –∑–≤—ë–∑–¥—ã –∏ –∫—É–¥–∞ –∫–æ—Ç–æ-–∞—Å—Ç—Ä–æ–ª–æ–≥ —Å–æ–≤–µ—Ç—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏ —É—Å—ã?"
        "\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–±–æ—Ä–∞ ‚Äî 4.99‚Ç¨. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"],
                ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ],
            resize_keyboard=True
        ),
    )

async def destiny_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from prompts import build_destiny_prompt_part1, build_destiny_prompt_part2
    from supabase_client import update_user

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if update.callback_query is not None:
        query = update.callback_query
        await query.answer()
        tg_id = query.from_user.id
        message = query.message
    else:
        query = None
        tg_id = update.effective_user.id
        message = update.message

    print("CALLBACK TRIGGERED SECOND", flush=True)

    user_list = get_user(tg_id)
    if not user_list:
        await message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ–π–¥–∏ /start.")
        return

    user = user_list[0]

    # --- –ï–°–õ–ò –ü–†–û–î–£–ö–¢ –û–ü–õ–ê–ß–ï–ù ---
    if user.get("paid_destiny"):
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF ‚Äî –ø—Ä–∏—Å—ã–ª–∞–µ–º —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª!
        if user.get("destiny_pdf_url"):
            await message.reply_document(
                document=user["destiny_pdf_url"],
                filename="Karta_Prednaznacheniya.pdf",
                caption=(
                    "–ú—è—É, –º–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –Ω–µ —Å—ã—Ä–∞—è –∫–æ–ø–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Ç–æ-—Ä–∞–∑–±–æ—Ä —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.\n"
                    "–ò–∑—É—á–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –º—É—Ä–ª—ã–∫–Ω–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–≤—ë–∑–¥–∞–º –∏ –ø–æ–º–Ω–∏ ‚Äî –¥–∞–∂–µ —Å–∞–º–∞—è –º—É–¥—Ä–∞—è –∫–æ—à–∫–∞ –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç –Ω–∞ –ª–∞–ø—ã. –í–ø–µ—Ä—ë–¥ –∫ —Å–≤–æ–µ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é!"
                ),
            )
            await asyncio.sleep(2)
            await message.reply_text(
                "–•–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–±–æ—Ä—ã? –í–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=ReplyKeyboardMarkup([["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
            )
            return

        # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω, –Ω–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç (—Å—Ç–∞—Ä—ã–µ —é–∑–µ—Ä—ã, –º–∏–≥—Ä–∞—Ü–∏—è) ‚Äî –≥–µ–Ω–µ—Ä–∏–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        await message.reply_text(
            "–ú—è—É! –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞–∑–≥–∞–¥—ã–≤–∞–Ω–∏—é —Ç–≤–æ–µ–π –∑–≤—ë–∑–¥–Ω–æ–π —Å—É–¥—å–±—ã ‚Äî –±—É–¥—É –∫–æ–ª–¥–æ–≤–∞—Ç—å –Ω–∞–¥ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ–π –ª–∏—á–Ω–æ, –ª–∞–ø–æ–π –Ω–∞ —Å–µ—Ä–¥—Ü–µ!\n"
            "–≠—Ç–æ –Ω–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π —à–∞–±–ª–æ–Ω —Å –±–∞–ª–∫–æ–Ω–∞ ‚Äî –≤—Å—ë —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º, –∫–∞–∫ –∏ –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —É–≤–∞–∂–∞—é—â–µ–º—É —Å–µ–±—è –∫–æ—Ç—É-–∞—Å—Ç—Ä–æ–ª–æ–≥—É.\n"
            "–ù–∞–±–µ—Ä–∏—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è, –∑–∞–π–º—ë—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç... –ê –ø–æ–∫–∞ –Ω–∞–ª–µ–π —Å–µ–±–µ –º–æ–ª–æ–∫–∞ (–∏–ª–∏, –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π, —á–∞—é), —Ä–∞—Å—Å–ª–∞–±—å —Ö–≤–æ—Å—Ç –∏ –ø–æ–º—É—Ä–ª—ã–∫–∞–π –æ —á—ë–º-–Ω–∏–±—É–¥—å —Ö–æ—Ä–æ—à–µ–º. –°–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!"
        )
        prompt_args = dict(
            name=user.get("name", "–î—Ä—É–≥"),
            date=datetime.strptime(user["birth_date"], "%Y-%m-%d").strftime("%d.%m.%Y"),
            time_str=user["birth_time"],
            city=user["birth_city"],
            country=user["birth_country"],
        )
        try:
            messages1 = build_destiny_prompt_part1(**prompt_args)
            report_part1 = ask_gpt(messages1, model="gpt-4-turbo", max_tokens=2500, temperature=0.9)
            messages2 = build_destiny_prompt_part2(**prompt_args)
            report_part2 = ask_gpt(messages2, model="gpt-4-turbo", max_tokens=2500, temperature=0.9)
            report_text = report_part1.strip() + "\n\n" + report_part2.strip()
        except Exception as e:
            print("GPT error:", e)
            await message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        try:
            pdf_bytes = text_to_pdf(report_text)
            public_url = upload_pdf_to_storage(user["id"], pdf_bytes)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ
            update_user(user["tg_id"], destiny_pdf_url=public_url)
            await message.reply_document(
                document=public_url,
                filename="Karta_Prednaznacheniya.pdf",
                caption=(
                    "–ú—è—É, –º–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –Ω–µ —Å—ã—Ä–∞—è –∫–æ–ø–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Ç–æ-—Ä–∞–∑–±–æ—Ä —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.\n"
                    "–ò–∑—É—á–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –º—É—Ä–ª—ã–∫–Ω–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–≤—ë–∑–¥–∞–º –∏ –ø–æ–º–Ω–∏ ‚Äî –¥–∞–∂–µ —Å–∞–º–∞—è –º—É–¥—Ä–∞—è –∫–æ—à–∫–∞ –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç –Ω–∞ –ª–∞–ø—ã. –í–ø–µ—Ä—ë–¥ –∫ —Å–≤–æ–µ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é!"
                ),
            )
            await asyncio.sleep(2)
            await message.reply_text(
                "–•–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–±–æ—Ä—ã? –í–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=ReplyKeyboardMarkup([["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
            )
        except Exception as e:
            print("PDF/upload error:", e)
            from io import BytesIO
            text_io = BytesIO(report_text.encode("utf-8"))
            text_io.name = "destiny.txt"
            text_io.seek(0)
            await message.reply_document(
                document=text_io,
                filename="destiny.txt",
                caption="–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞, –Ω–æ PDF –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª—Å—è. –í–æ—Ç —Ç–µ–∫—Å—Ç:"
            )
        return

    # --- –ï–°–õ–ò –ü–†–û–î–£–ö–¢ –ù–ï –û–ü–õ–ê–ß–ï–ù ---
    success_url = "https://t.me/CosmoAstrologyBot"
    cancel_url = "https://t.me/CosmoAstrologyBot"
    checkout_url = create_checkout_session(tg_id, "destiny", success_url, cancel_url)

    await message.reply_text(
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 4.99‚Ç¨. –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –∑–≤—ë–∑–¥–Ω—ã–π –ø—É—Ç—å ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –∫–æ—Ç–∞-–∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –ø–∞—Ä–æ–π –º–æ–Ω–µ—Ç –Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤—É! –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ üëá",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ Stripe", url=checkout_url)
        ]])
    )
    await message.reply_text(
        "‚ö°Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏ —Å–Ω–æ–≤–∞ –∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É¬ª ‚Äî —è —É–∂–µ –±—É–¥—É –º—É—Ä–ª—ã–∫–∞—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–∏!\n"
        "–ü–ª–∞—Ç—ë–∂ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π, –∫–∞–∫ –∫–æ—Ç –ø–æ–¥ –ø–ª–µ–¥–æ–º. –û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç (—É—Å–ø–µ–µ—à—å –Ω–∞–ª–∏—Ç—å —Å–µ–±–µ –º–æ–ª–æ–∫–∞).\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –ê—Å—Ç—Ä–æ–ö–æ—Ç—Å–∫–æ–≥–æ! –ú—è—É üêæ"
    )

async def solyar_card_callback(update, context):
    from prompts import build_solyar_prompt_part1, build_solyar_prompt_part2
    from supabase_client import update_user

    if update.callback_query is not None:
        query = update.callback_query
        await query.answer()
        tg_id = query.from_user.id
        message = query.message
    else:
        query = None
        tg_id = update.effective_user.id
        message = update.message

    user_list = get_user(tg_id)
    if not user_list:
        await message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ–π–¥–∏ /start.")
        return

    user = user_list[0]

    # –ï—Å–ª–∏ –∫—É–ø–ª–µ–Ω –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º PDF
    if user.get("paid_solyar") and user.get("solyar_pdf_url"):
        await message.reply_document(
            document=user["solyar_pdf_url"],
            filename="Solyar_Report.pdf",
            caption=(
                "–ú—è—É, –≤—Å—ë –≥–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥ ‚Äî —Å–æ–ª—è—Ä –æ—Ç –ê—Å—Ç—Ä–æ–ö–æ—Ç—Å–∫–æ–≥–æ. –ò–∑—É—á–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–π–¥–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã, –∏ –ø–æ–º–Ω–∏: —Ç–≤–æ–π –≥–æ–¥ ‚Äî —ç—Ç–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –¥–ª—è —Å–≤–µ—Ä—à–µ–Ω–∏–π."
            ),
        )
        await asyncio.sleep(2)
        await message.reply_text(
            "–•–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–±–æ—Ä—ã? –í–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup([["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return

    if user.get("paid_solyar"):
        await message.reply_text(
            "–ú—è—É! –Ø –Ω–∞—á–∏–Ω–∞—é —Å–æ–±–∏—Ä–∞—Ç—å —Ç–≤–æ–π –≥–æ–¥–æ–≤–æ–π –ø—É—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑, –∞ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥. –•–≤–æ—Å—Ç–∏–∫–æ–º —á—É–≤—Å—Ç–≤—É—é: –ø–æ–ª—É—á–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ!"
        )

        prompt_args = dict(
            name=user.get("name", "–î—Ä—É–≥"),
            date=datetime.strptime(user["birth_date"], "%Y-%m-%d").strftime("%d.%m.%Y"),
            time_str=user["birth_time"],
            city=user["birth_city"],
            country=user["birth_country"],
        )

        try:
            messages1 = build_solyar_prompt_part1(**prompt_args)
            report_part1 = ask_gpt(messages1, model="gpt-4-turbo", max_tokens=2500, temperature=0.9)
            messages2 = build_solyar_prompt_part2(**prompt_args)
            report_part2 = ask_gpt(messages2, model="gpt-4-turbo", max_tokens=2500, temperature=0.9)
            report_text = report_part1.strip() + "\n\n" + report_part2.strip()
        except Exception as e:
            print("GPT error:", e)
            await message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        try:
            pdf_bytes = text_to_pdf(report_text, product_type="solyar")
            public_url = upload_pdf_to_storage(user["id"], pdf_bytes)
            update_user(user["tg_id"], solyar_pdf_url=public_url)
            await message.reply_document(
                document=public_url,
                filename="Solyar_Report.pdf",
                caption="–ú—è—É, –≤—Å—ë –≥–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥ ‚Äî —Å–æ–ª—è—Ä –æ—Ç –ê—Å—Ç—Ä–æ–ö–æ—Ç—Å–∫–æ–≥–æ. –ò–∑—É—á–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–π–¥–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã, –∏ –ø–æ–º–Ω–∏: —Ç–≤–æ–π –≥–æ–¥ ‚Äî —ç—Ç–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –¥–ª—è —Å–≤–µ—Ä—à–µ–Ω–∏–π."
            )
            await asyncio.sleep(2)
            await message.reply_text(
                "–•–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–±–æ—Ä—ã? –í–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=ReplyKeyboardMarkup([["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
            )
        except Exception as e:
            print("PDF/upload error:", e)
            from io import BytesIO
            text_io = BytesIO(report_text.encode("utf-8"))
            text_io.name = "solyar.txt"
            text_io.seek(0)
            await message.reply_document(
                document=text_io,
                filename="solyar.txt",
                caption="–°–æ–ª—è—Ä –≥–æ—Ç–æ–≤, –Ω–æ PDF –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª—Å—è. –í–æ—Ç —Ç–µ–∫—Å—Ç:"
            )
        return

    # –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ–ø–ª–∞—Ç–∏—Ç—å
    success_url = "https://t.me/CosmoAstrologyBot"
    cancel_url = "https://t.me/CosmoAstrologyBot"
    checkout_url = create_checkout_session(tg_id, "solyar", success_url, cancel_url)

    await message.reply_text(
        "–ì–æ–¥–æ–≤–æ–π –ø—É—Ç—å ‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å: 4.99‚Ç¨. –ü–æ–¥–¥–µ—Ä–∂–∏ –∫–æ—Ç–∞-–∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –ø–∞—Ä–æ–π –º–æ–Ω–µ—Ç –∏ –ø–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ —Ç–≤–æ–µ–º—É –≥–æ–¥—É. –û–ø–ª–∞—Ç–∞ –Ω–∏–∂–µ üëá",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ Stripe", url=checkout_url)]])
    )
    await message.reply_text(
        "‚ö°Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∏ —Å–Ω–æ–≤–∞ –∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å —Å–æ–ª—è—Ä¬ª. –í—Å—ë —Å–¥–µ–ª–∞—é –±—ã—Å—Ç—Ä–æ –∏ –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É. –ú—è—É üêæ"
    )

async def income_card_callback(update, context):
    from prompts import build_income_prompt_part1, build_income_prompt_part2
    from supabase_client import update_user

    if update.callback_query is not None:
        query = update.callback_query
        await query.answer()
        tg_id = query.from_user.id
        message = query.message
    else:
        query = None
        tg_id = update.effective_user.id
        message = update.message

    user_list = get_user(tg_id)
    if not user_list:
        await message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ–π–¥–∏ /start.")
        return

    user = user_list[0]

    # –ï—Å–ª–∏ –∫—É–ø–ª–µ–Ω –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º PDF
    if user.get("paid_income") and user.get("income_pdf_url"):
        await message.reply_document(
            document=user["income_pdf_url"],
            filename="Income_Report.pdf",
            caption="–í–æ—Ç —Ç–≤–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ –¥–µ–Ω—å–≥–∞–º –∏ –∫–∞—Ä—å–µ—Ä–µ! –ò–∑—É—á–∏ —Å–æ–≤–µ—Ç—ã –∫–æ—Ç–∞, –≤–Ω–µ–¥—Ä—è–π —á–µ–∫–ª–∏—Å—Ç –∏ —á—É–≤—Å—Ç–≤—É–π —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –ú—è—É!"
        )
        await asyncio.sleep(2)
        await message.reply_text(
            "–•–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–±–æ—Ä—ã? –í–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup([["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return

    if user.get("paid_income"):
        await message.reply_text(
            "–ú—è—É! –î–µ–ª–∞—é —Ä–∞–∑–±–æ—Ä –ø–æ –¥–µ–Ω—å–≥–∞–º –∏ –∫–∞—Ä—å–µ—Ä–µ. –•–≤–æ—Å—Ç–æ–º —á—É—é: —Å–µ–π—á–∞—Å —Ç–µ–±–µ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã!"
        )

        prompt_args = dict(
            name=user.get("name", "–î—Ä—É–≥"),
            date=datetime.strptime(user["birth_date"], "%Y-%m-%d").strftime("%d.%m.%Y"),
            time_str=user["birth_time"],
            city=user["birth_city"],
            country=user["birth_country"],
        )

        try:
            messages1 = build_income_prompt_part1(**prompt_args)
            report_part1 = ask_gpt(messages1, model="gpt-4-turbo", max_tokens=2500, temperature=0.9)
            messages2 = build_income_prompt_part2(**prompt_args)
            report_part2 = ask_gpt(messages2, model="gpt-4-turbo", max_tokens=2500, temperature=0.9)
            report_text = report_part1.strip() + "\n\n" + report_part2.strip()
        except Exception as e:
            print("GPT error:", e)
            await message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        try:
            pdf_bytes = text_to_pdf(report_text, product_type="income")
            public_url = upload_pdf_to_storage(user["id"], pdf_bytes)
            update_user(user["tg_id"], income_pdf_url=public_url)
            await message.reply_document(
                document=public_url,
                filename="Income_Report.pdf",
                caption="–í–æ—Ç —Ç–≤–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ –¥–µ–Ω—å–≥–∞–º –∏ –∫–∞—Ä—å–µ—Ä–µ! –ò–∑—É—á–∏ —Å–æ–≤–µ—Ç—ã –∫–æ—Ç–∞, –≤–Ω–µ–¥—Ä—è–π —á–µ–∫–ª–∏—Å—Ç –∏ —á—É–≤—Å—Ç–≤—É–π —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –ú—è—É!"
            )
            await asyncio.sleep(2)
            await message.reply_text(
                "–•–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–±–æ—Ä—ã? –í–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=ReplyKeyboardMarkup([["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
            )
        except Exception as e:
            print("PDF/upload error:", e)
            from io import BytesIO
            text_io = BytesIO(report_text.encode("utf-8"))
            text_io.name = "income.txt"
            text_io.seek(0)
            await message.reply_document(
                document=text_io,
                filename="income.txt",
                caption="–†–∞–∑–±–æ—Ä –≥–æ—Ç–æ–≤, –Ω–æ PDF –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª—Å—è. –í–æ—Ç —Ç–µ–∫—Å—Ç:"
            )
        return

    # –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ–ø–ª–∞—Ç–∏—Ç—å
    success_url = "https://t.me/CosmoAstrologyBot"
    cancel_url = "https://t.me/CosmoAstrologyBot"
    checkout_url = create_checkout_session(tg_id, "income", success_url, cancel_url)

    await message.reply_text(
        "–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–∞–∑–±–æ—Ä ‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å: 4.99‚Ç¨. –ü–æ–¥–¥–µ—Ä–∂–∏ –∫–æ—Ç–∞-–∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π —Ä–∞–∑–±–æ—Ä! –û–ø–ª–∞—Ç–∞ –Ω–∏–∂–µ üëá",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ Stripe", url=checkout_url)]]),
    )
    await message.reply_text(
        "‚ö°Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∏ —Å–Ω–æ–≤–∞ –∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä –∫–∞—Ä—å–µ—Ä—ã¬ª. –í—Å—ë —Å–¥–µ–ª–∞—é –±—ã—Å—Ç—Ä–æ –∏ –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É. –ú—è—É üêæ"
    )
COMPAT_NAME, COMPAT_DATE, COMPAT_TIME, COMPAT_LOCATION = range(100, 104)  # –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏

async def start_compatibility(update, context):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏ –∏–º—è –∏–ª–∏ –ø–æ–º–µ—Ç–∫—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–í–∏–∫—Ç–æ—Ä¬ª –∏–ª–∏ ¬´–ü–∞—Ä—Ç–Ω—ë—Ä¬ª):",
        reply_markup=ReplyKeyboardRemove()
    )
    return COMPAT_NAME

async def get_partner_name(update, context):
    context.user_data["partner_name"] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return COMPAT_DATE

async def get_partner_date(update, context):
    try:
        context.user_data["partner_birth_date"] = datetime.strptime(update.message.text.strip(), "%d.%m.%Y").date()
        await update.message.reply_text("–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (–ß–ß:–ú–ú) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ –∑–Ω–∞—é¬ª:")
        return COMPAT_TIME
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä: 15.01.1992")
        return COMPAT_DATE

async def get_partner_time(update, context):
    t = update.message.text.strip()
    if t.lower() == "–Ω–µ –∑–Ω–∞—é":
        context.user_data["partner_birth_time"] = None
    else:
        try:
            context.user_data["partner_birth_time"] = datetime.strptime(t, "%H:%M").time()
        except Exception:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä: 08:30 –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ –∑–Ω–∞—é¬ª")
            return COMPAT_TIME
    await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞) –∏–ª–∏ ¬´–Ω–µ –∑–Ω–∞—é¬ª:")
    return COMPAT_LOCATION

async def get_partner_location(update, context):
    text = update.message.text.strip()
    if text.lower() == "–Ω–µ –∑–Ω–∞—é":
        context.user_data["partner_country"] = None
        context.user_data["partner_city"] = None
    else:
        parts = [p.strip() for p in text.split(",")]
        context.user_data["partner_country"] = parts[0] if len(parts) > 0 else None
        context.user_data["partner_city"] = parts[1] if len(parts) > 1 else None
    # –î–∞–ª—å—à–µ ‚Äî –≤—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
    await compatibility_card_callback(update, context)
    return ConversationHandler.END

async def compatibility_card_callback(update, context):
    from supabase_client import update_user

    user_tg = update.effective_user
    user_db = get_user(user_tg.id)[0]

    # –ï—Å–ª–∏ –∫—É–ø–ª–µ–Ω –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º PDF
    if user_db.get("paid_compatibility") and user_db.get("compatibility_pdf_url"):
        await update.message.reply_document(
            document=user_db["compatibility_pdf_url"],
            filename="Compatibility_Report.pdf",
            caption="–í–æ—Ç —Ç–≤–æ–π —Ä–∞–∑–±–æ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏! –ú—è—É!"
        )
        await asyncio.sleep(2)
        await main_menu(update, context)
        return

    if not user_db.get("paid_compatibility"):
        success_url = "https://t.me/CosmoAstrologyBot"
        cancel_url = "https://t.me/CosmoAstrologyBot"
        checkout_url = create_checkout_session(user_tg.id, "compatibility", success_url, cancel_url)
        await update.message.reply_text(
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 4.99‚Ç¨. –ü–æ–¥–¥–µ—Ä–∂–∏ –∫–æ—Ç–∞-–∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –∏ –ø–æ–ª—É—á–∏ —Ä–∞–∑–±–æ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è! –û–ø–ª–∞—Ç–∞ –Ω–∏–∂–µ üëá",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ Stripe", url=checkout_url)]])
        )
        await update.message.reply_text(
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π —Ä–∞–∑–±–æ—Ä.",
            reply_markup=ReplyKeyboardMarkup(
                [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"], ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
                resize_keyboard=True
            )
        )
        return

    user = {
        "name": user_db.get("name", "–ö–ª–∏–µ–Ω—Ç"),
        "birth_date": datetime.strptime(user_db["birth_date"], "%Y-%m-%d").strftime("%d.%m.%Y"),
        "birth_time": user_db.get("birth_time"),
        "birth_city": user_db.get("birth_city"),
        "birth_country": user_db.get("birth_country"),
    }
    partner = {
        "name": context.user_data.get("partner_name", "–ü–∞—Ä—Ç–Ω—ë—Ä"),
        "birth_date": context.user_data.get("partner_birth_date").strftime("%d.%m.%Y"),
        "birth_time": context.user_data.get("partner_birth_time"),
        "birth_city": context.user_data.get("partner_city"),
        "birth_country": context.user_data.get("partner_country"),
    }

    await update.message.reply_text(
        "–ú—è—É! –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–±–æ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –õ–∞–ø—ã —á–µ—à—É—Ç—Å—è —É–∑–Ω–∞—Ç—å –≤—Å—ë –ø—Ä–æ –≤–∞—à–∏ –∑–≤—ë–∑–¥—ã ‚Äî –∂–¥–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π PDF!"
    )

    try:
        messages1 = build_compatibility_prompt_part1(user, partner)
        report_part1 = ask_gpt(messages1, model="gpt-4-turbo", max_tokens=2500, temperature=0.9)
        messages2 = build_compatibility_prompt_part2(user, partner)
        report_part2 = ask_gpt(messages2, model="gpt-4-turbo", max_tokens=2500, temperature=0.9)
        report_text = report_part1.strip() + "\n\n" + report_part2.strip()
    except Exception as e:
        print("GPT error:", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    try:
        pdf_bytes = text_to_pdf(report_text, product_type="compatibility")
        public_url = upload_pdf_to_storage(user_db["id"], pdf_bytes)
        update_user(user_db["tg_id"], compatibility_pdf_url=public_url)
        await update.message.reply_document(
            document=public_url,
            filename="Compatibility_Report.pdf",
            caption="–í–æ—Ç —Ç–≤–æ–π —Ä–∞–∑–±–æ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏! –ú—è—É!"
        )
        await asyncio.sleep(2)
        await main_menu(update, context)
    except Exception as e:
        print("PDF/upload error:", e)
        from io import BytesIO
        text_io = BytesIO(report_text.encode("utf-8"))
        text_io.name = "compatibility.txt"
        text_io.seek(0)
        await update.message.reply_document(
            document=text_io,
            filename="compatibility.txt",
            caption="–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞, –Ω–æ PDF –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª—Å—è. –í–æ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:"
        )
