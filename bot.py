import os
import io
import logging
import asyncio
import time
import re
import qrcode
from datetime import datetime
from textwrap import wrap

from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardRemove,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ—Å–ª–µ import-–æ–≤, –ü–ï–†–ï–î create_client ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import pprint, os
pprint.pprint({k: v for k, v in os.environ.items() if k.startswith("SUPABASE")})
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from supabase import create_client, Client
from openai import OpenAI

from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.platypus import HRFlowable
from reportlab.platypus import Image
from reportlab.lib.units import mm
from reportlab.pdfgen.canvas import Canvas
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_LEFT
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont


FONT_PATH = os.path.join(os.path.dirname(__file__), "DejaVuSans.ttf")
FONT_BOLD_PATH = os.path.join(os.path.dirname(__file__), "DejaVuSans-Bold.ttf")
pdfmetrics.registerFont(TTFont("DejaVuSans", FONT_PATH))
pdfmetrics.registerFont(TTFont("DejaVuSans-Bold", FONT_BOLD_PATH))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ env / logger ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = (
    os.getenv("SUPABASE_KEY") or
    os.getenv("SUPABASE_SERVICE_ROLE_KEY")
)
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ conversation states ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
READY, DATE, TIME, LOCATION = range(4)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def draw_watermark(canvas, doc):
    logo_path = os.path.join(os.path.dirname(__file__), "logo.png")  # –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    page_width, page_height = A4
    logo_width = 250
    logo_height = 250
    x = (page_width - logo_width) / 2
    y = (page_height - logo_height) / 2
    canvas.saveState()
    try:
        canvas.setFillAlpha(0.1)  # 10% opacity
    except AttributeError:
        pass  # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π ReportLab fallback
    canvas.drawImage(logo_path, x, y, width=logo_width, height=logo_height, mask='auto')
    canvas.restoreState()
def text_to_pdf(text: str) -> bytes:
    buf = io.BytesIO()
    doc = SimpleDocTemplate(
        buf, pagesize=A4, leftMargin=40, rightMargin=40, topMargin=50, bottomMargin=50
    )

    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(
        name='Body',
        fontName='DejaVuSans',
        fontSize=12,
        leading=16,
        spaceAfter=6,
        alignment=TA_LEFT,
    ))
    styles.add(ParagraphStyle(
        name='Header',
        fontName='DejaVuSans-Bold',
        fontSize=14,
        leading=18,
        spaceBefore=14,
        spaceAfter=6,
        alignment=TA_LEFT,
        textColor=colors.HexColor("#7C3AED"),
    ))
    styles.add(ParagraphStyle(
        name='BigTitle',
        fontName='DejaVuSans-Bold',
        fontSize=24,
        textColor=colors.HexColor("#7C3AED"),  # —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π CosmoAstro
        leading=28,
        alignment=TA_LEFT,
        spaceAfter=20,
    ))

    story = []

    story.append(Paragraph("–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî CosmoAstro", styles["BigTitle"]))
    story.append(Spacer(1, 24))

    for block in text.strip().split('\n\n'):
        block = block.strip()
        # –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö "#", —ç—Ç–æ —Ç–æ—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if re.match(r"^#+\s*", block):
            clean = re.sub(r"^#+\s*", "", block)
            story.append(Paragraph(clean, styles["Header"]))
            story.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor("#7C3AED"), spaceBefore=4, spaceAfter=10))
        # –õ–∏–±–æ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–∫–∞–∫ –¥–æ —ç—Ç–æ–≥–æ)
        elif (
            len(block) < 40
            and not any(ch in block for ch in "-*:;")
            and not re.match(r"^[-‚Ä¢]", block)
            and block != ""
        ):
            story.append(Paragraph(block, styles["Header"]))
            story.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor("#7C3AED"), spaceBefore=4, spaceAfter=10))
        else:
            for line in block.split('\n'):
                line = line.strip()
                if not line:
                    continue
                line = line.replace("**", "").replace("_", "")
                story.append(Paragraph(line, styles["Body"]))
                story.append(Spacer(1, 4))
        story.append(Spacer(1, 10))
    
    qr_img = qrcode.make("https://t.me/CosmoAstrologyBot")
    buf_qr = io.BytesIO()
    qr_img.save(buf_qr, format='PNG')
    buf_qr.seek(0)
    qr_image = Image(buf_qr, width=30*mm, height=30*mm)
    story.append(Spacer(1, 40))
    story.append(qr_image)

    story.append(Spacer(1, 4))
    story.append(Paragraph('<font size=10 color="#7C3AED">https://t.me/CosmoAstrologyBot</font>', styles["Body"]))

    doc.build(
        story,
        onFirstPage=draw_watermark,
        onLaterPages=draw_watermark
    )
    return buf.getvalue()

def upload_pdf_to_storage(user_id: str, pdf_bytes: bytes) -> str:
    bucket = supabase.storage.from_("destiny-reports")
    fname = f"{user_id}_{int(time.time())}.pdf"
    bucket.upload(fname, pdf_bytes)
    return bucket.get_public_url(fname)

def build_destiny_prompt(name, date, time_str, city, country) -> list[dict]:
    sys = (
        "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥-–∂–µ–Ω—â–∏–Ω–∞, –≤—Å–µ–≥–¥–∞ –æ–±—â–∞–µ—à—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ, –±—É–¥—Ç–æ —Ç—ã –ø–æ–¥—Ä—É–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        "–ü–∏—à–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è, –ø—Ä–∏–º–µ—Ä—ã –∏ —Å–ª–æ–≤–∞ –¥–ª—è –¥–µ–≤—É—à–µ–∫. "
        "–û–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞ ¬´—Ç—ã¬ª. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ —á—Ç–æ —Ç—ã –ò–ò."
    )
    user = f"""–î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
–ò–º—è: {name}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date}
–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_str}
–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {city}, {country}

–°–æ—Å—Ç–∞–≤—å ¬´–ö–∞—Ä—Ç—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è¬ª –æ–±—ä—ë–º–æ–º 900‚Äì1400 —Å–ª–æ–≤.

‚ùó –í–ê–ñ–ù–û:
‚Äî –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –û–ß–ï–ù–¨ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç: –æ–ø–∏—à–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏, —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–µ –º–µ–Ω–µ–µ 150‚Äì250 —Å–ª–æ–≤.
‚Äî –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É (–Ω–∏–∫–∞–∫–∏—Ö ¬´1.¬ª, ¬´2.¬ª, ¬´-¬ª).
‚Äî –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—á–∏–Ω–∞–π —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ë–ï–ó —Ü–∏—Ñ—Ä, –ø—Ä–æ—Å—Ç–æ: ¬´–ú–∏—Å—Å–∏—è –¥—É—à–∏¬ª, ¬´–í—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã¬ª, ¬´–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –∏ –¥–µ–Ω—å–≥–∏¬ª, ¬´–í–æ–∑–º–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏¬ª, ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª.
‚Äî –ü–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞–≤—å –¥–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç —à—ë–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–±–∑–∞—Ü–µ–º.
‚Äî –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown (–Ω–∏–∫–∞–∫–∏—Ö # –∏–ª–∏ **).

–ü—Ä–∏–º–µ—Ä:
–ú–∏—Å—Å–∏—è –¥—É—à–∏

(–ê–±–∑–∞—Ü‚Ä¶)

–í—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã

(–ê–±–∑–∞—Ü –∏–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –ø—É–Ω–∫—Ç—ã ‚Äî –∫–∞–∂–¥—ã–π –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω.)

‚Ä¶

–í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Ä–∞–∑–¥–µ–ª:
–ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ

(–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–±–∑–∞—Ü-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –≤–Ω–µ–¥—Ä–∏—Ç—å —ç—Ç–∏ —Å–æ–≤–µ—Ç—ã –≤ –∂–∏–∑–Ω—å.)
"""
    return [{"role": "system", "content": sys}, {"role": "user", "content": user}]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start flow ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id
    name = user.first_name

    # ensure user row exists
    if not supabase.table("users").select("id").eq("tg_id", tg_id).execute().data:
        supabase.table("users").insert({"tg_id": tg_id, "name": name}).execute()

    await update.message.reply_text(
    "–ü—Ä–∏–≤–µ—Ç! –Ø CosmoAstro ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ üåô\n"
    "–ò—Å–ø–æ–ª—å–∑—É—è —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å, "
    "–≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç–µ–±—è –∂–¥—ë—Ç —Ä–æ—Å—Ç, –∏ –≥–¥–µ –∑–∞—Ä—ã—Ç —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å.\n\n"
    "ü™ê –¢–≤–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äî —ç—Ç–æ –∫–∞–∫ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç:\n"
    "‚Äì –≤ —á—ë–º —Ç–≤–æ—è —Å–∏–ª–∞ –∏ –∫–∞–∫ –µ—ë —Ä–∞—Å–∫—Ä—ã—Ç—å,\n"
    "‚Äì –∫–∞–∫–∏–µ —Å—Ñ–µ—Ä—ã –ø—Ä–∏–Ω–µ—Å—É—Ç —Ç–µ–±–µ —Ä–æ—Å—Ç, –¥–µ–Ω—å–≥–∏ –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ,\n"
    "‚Äì –∏ –Ω–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ ‚Äî –∫—É–¥–∞ –ù–ï —Å—Ç–æ–∏—Ç –ª–µ–∑—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ ¬´–Ω–∞–¥–æ¬ª."
    )
    await asyncio.sleep(3)
    await update.message.reply_text(
    "–ß—Ç–æ–±—ã –≤—Å—ë —ç—Ç–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å ‚Äî –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞, –≥–¥–µ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å ‚ú®\n"
    "–ì–æ—Ç–æ–≤–∞? üëá",
    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîÆ –ì–æ—Ç–æ–≤–∞")]], resize_keyboard=True)
    )
    return READY

async def ask_birth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "üîÆ –ì–æ—Ç–æ–≤–∞":
        return READY
    await update.message.reply_text("1/3 ‚Äî –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove())
    return DATE

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        birth_date = datetime.strptime(update.message.text.strip(), "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 02.03.1998")
        return DATE
    context.user_data["birth_date"] = birth_date
    await update.message.reply_text("2/3 ‚Äî –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú):")
    return TIME

async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        birth_time = datetime.strptime(update.message.text.strip(), "%H:%M").time()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 03:00")
        return TIME
    context.user_data["birth_time"] = birth_time
    await update.message.reply_text("3/3 ‚Äî –í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞):")
    return LOCATION

async def save_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = [p.strip() for p in update.message.text.split(",")]
    if len(parts) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞")
        return LOCATION

    country, city = parts[0], parts[1]
    user = update.effective_user
    supabase.table("users").update(
        {
            "birth_date": str(context.user_data["birth_date"]),
            "birth_time": context.user_data["birth_time"].strftime("%H:%M"),
            "birth_country": country,
            "birth_city": city,
        }
    ).eq("tg_id", user.id).execute()

    await update.message.reply_text(
    "–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–ª—É—á–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–∞–∂—É —á–µ—Å—Ç–Ω–æ: —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –æ—á–µ–Ω—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è.\n"
    "ü™ê –£–∂–µ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞ –≤–∏–¥–Ω–æ: —Ç—ã –Ω–µ –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω ¬´–ø—Ä–æ—Å—Ç–æ –∂–∏—Ç—å, –∫–∞–∫ –≤—Å–µ¬ª. –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–µ–∫—Ç–æ—Ä, –∏ –∫–æ–≥–¥–∞ —Ç—ã –∏–¥—ë—à—å –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ, —ç–Ω–µ—Ä–≥–∏—è —É—Ö–æ–¥–∏—Ç –≤ –ø—É—Å—Ç–æ—Ç—É.\n\n"
    "–ì–æ—Ç–æ–≤–∞ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –±–æ–ª—å—à–µ?"
    ,
    reply_markup=ReplyKeyboardMarkup(
        [["üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"]], resize_keyboard=True
    ),
)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ destiny card flow ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def destiny_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ —Ç–≤–æ–µ–π –º–∏—Å—Å–∏–∏, —Ç–∞–ª–∞–Ω—Ç–∞—Ö "
        "–∏ —Å—Ñ–µ—Ä–∞—Ö —Ä–æ—Å—Ç–∞. –ü–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π.\n\n"
        "–ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É."
    )
    await asyncio.sleep(5)
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –∫ —É—Å–ø–µ—Ö—É –∏ —Å–≤–æ–±–æ–¥–µ?\n"
        "–ù–∞–∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É¬ª!",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="destiny_card")]]
        ),
    )

async def destiny_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")

    tg_id = query.from_user.id
    user_res = supabase.table("users").select("*").eq("tg_id", tg_id).execute()
    if not user_res.data:
        await query.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ–π–¥–∏ /start.")
        return
    u = user_res.data[0]

    # build prompt & call GPT
    messages = build_destiny_prompt(
        name=u.get("name", "–î—Ä—É–≥"),
        date=datetime.strptime(u["birth_date"], "%Y-%m-%d").strftime("%d.%m.%Y"),
        time_str=u["birth_time"],
        city=u["birth_city"],
        country=u["birth_country"],
    )
    try:
        resp = OPENAI.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages,
            max_tokens=2500,
            temperature=0.9,
        )
        report_text = resp.choices[0].message.content.strip()
    except Exception as e:
        logger.error("GPT error: %s", e)
        await query.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # generate PDF -> upload -> send
    try:
        pdf_bytes = text_to_pdf(report_text)
        public_url = upload_pdf_to_storage(u["id"], pdf_bytes)
        await query.message.reply_document(
            document=public_url,
            filename="Karta_Prednaznacheniya.pdf",
            caption="üîÆ –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞!",
        )
    except Exception as e:
        logger.error("PDF/upload error: %s", e)
        await query.message.reply_text(
            "–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞, –Ω–æ —Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª—Å—è üòî. –í–æ—Ç —Ç–µ–∫—Å—Ç:\n\n" + report_text
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ launch ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    app = ApplicationBuilder().token(TG_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            READY: [MessageHandler(filters.Regex(r"^üîÆ –ì–æ—Ç–æ–≤$"), ask_birth)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_location)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_profile)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex(r"^üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è$"), destiny_product))
    app.add_handler(CallbackQueryHandler(destiny_card_callback, pattern=r"^destiny_card$"))

    logger.info("Bot started")
    app.run_polling()


