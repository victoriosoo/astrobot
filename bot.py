import os
import logging
import asyncio
from datetime import datetime, time as dt_time

from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardRemove,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from supabase import create_client, Client
from openai import OpenAI

# --------------------------------------------------
# ENV & INIT
# --------------------------------------------------
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
openai = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# --------------------------------------------------
# Conversation states
# --------------------------------------------------
READY, DATE, TIME, LOCATION = range(4)

# --------------------------------------------------
# /start command
# --------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id

    # ensure user row exists
    if not supabase.table("users").select("id").eq("tg_id", tg_id).execute().data:
        supabase.table("users").insert({"tg_id": tg_id, "name": user.first_name}).execute()

    # intro
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CosmoAstro ‚Äî —Ç–≤–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é: —Ç–µ–±–µ —Å–∞–º–æ–º—É üåå\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚ú® –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "üåô –£–∑–Ω–∞–≤–∞—Ç—å, –∫–∞–∫ –ª—É–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–π –¥–µ–Ω—å\n"
        "ü™ê –ü–æ–Ω—è—Ç—å, –≤ –∫–∞–∫–∏–µ –¥–Ω–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –∞ –≤ –∫–∞–∫–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–±—ã—Ç—å —Å–æ–±–æ–π\n\n"
        "–í—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞."
    )

    await asyncio.sleep(5)

    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –±–æ–ª—å—à–µ?\n–ù–∞–∂–º–∏ \"–ì–æ—Ç–æ–≤\", –∏ –º—ã –Ω–∞—á–Ω—ë–º.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîÆ –ì–æ—Ç–æ–≤")]], resize_keyboard=True),
    )
    return READY

# --------------------------------------------------
# Step 0 ‚Äî wait for "–ì–æ—Ç–æ–≤"
# --------------------------------------------------
async def wait_ready(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "üîÆ –ì–æ—Ç–æ–≤":
        return READY  # ignore anything else

    await update.message.reply_text(
        "1/3 ‚Äî –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=ReplyKeyboardRemove(),
    )
    return DATE

# --------------------------------------------------
# Step 1 ‚Äî date
# --------------------------------------------------
async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    try:
        birth_date = datetime.strptime(raw, "%d.%m.%Y").date()
        context.user_data["birth_date"] = birth_date
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫: 02.03.1998")
        return DATE

    await update.message.reply_text("2/3 ‚Äî –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 03:00):")
    return TIME

# --------------------------------------------------
# Step 2 ‚Äî time
# --------------------------------------------------
async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    try:
        birth_time = datetime.strptime(raw, "%H:%M").time()
        context.user_data["birth_time"] = birth_time
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫: 03:00")
        return TIME

    await update.message.reply_text(
        "3/3 ‚Äî –ò –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞",
    )
    return LOCATION

# --------------------------------------------------
# Step 3 ‚Äî location
# --------------------------------------------------
async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    if "," not in raw:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥")
        return LOCATION

    country, city = [x.strip() for x in raw.split(",", maxsplit=1)]
    context.user_data["birth_country"] = country
    context.user_data["birth_city"] = city

    # Persist to supabase
    user = update.effective_user
    supabase.table("users").update(
        {
            "birth_date": str(context.user_data["birth_date"]),
            "birth_time": str(context.user_data["birth_time"]),
            "birth_country": country,
            "birth_city": city,
        }
    ).eq("tg_id", user.id).execute()

    # Final message with menu
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –º—ã –º–æ–∂–µ–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É–¥–∞ –±–æ–ª—å—à–µ, —á–µ–º —Ç—ã —Å–∞–º –æ —Å–µ–±–µ –∑–Ω–∞–µ—à—å.\n\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(
            [["üîÆ –ù–∞—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä"], ["üåô –õ—É–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"], ["‚ö° –≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è"]], resize_keyboard=True
        ),
    )
    return ConversationHandler.END

# --------------------------------------------------
# Cancel
# --------------------------------------------------
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --------------------------------------------------
# Main
# --------------------------------------------------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TG_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            READY: [MessageHandler(filters.TEXT & ~filters.COMMAND, wait_ready)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_location)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    logger.info("Bot started")
    app.run_polling()

