import os
import io
import logging
import asyncio
from datetime import datetime
from textwrap import dedent

from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardRemove,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    constants,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from supabase import create_client, Client
from openai import OpenAI
from reportlab.pdfgen import canvas

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ env & clients ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")  # service‚Äërole key ‚áí full access
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
openai = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ state machine ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
READY, DATE, TIME, LOCATION = range(4)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def text_to_pdf(text: str) -> bytes:
    """Convert plain text to PDF and return bytes."""
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer)
    y = 800
    for line in text.splitlines():
        c.drawString(40, y, line)
        y -= 15
        if y < 40:
            c.showPage()
            y = 800
    c.save()
    buffer.seek(0)
    return buffer.read()

def upload_pdf(user_id: str, data: bytes) -> str:
    bucket = supabase.storage.from_("destiny-reports")
    filename = f"{user_id}.pdf"
    bucket.upload(filename, data, content_type="application/pdf", upsert=True)
    return bucket.get_public_url(filename)

def build_destiny_prompt(row: dict) -> str:
    return dedent(f"""
        SYSTEM:
        –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥. –û–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω–æ, –±–µ–∑ –∂–∞—Ä–≥–æ–Ω–∞, –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ, –Ω–∞ ¬´—Ç—ã¬ª.
        –ù–µ —É–ø–æ–º–∏–Ω–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –∏ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç.

        USER:
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
        –ò–º—è: {row['name']}
        –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {row['birth_date']}
        –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {row['birth_time']}
        –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {row['birth_city']}, {row['birth_country']}

        –°–æ—Å—Ç–∞–≤—å ¬´–ö–∞—Ä—Ç—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è¬ª (650‚Äì800 —Å–ª–æ–≤). –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
        1. üéØ –ú–∏—Å—Å–∏—è –¥—É—à–∏ ‚Äì 5‚Äì7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
        2. üíé –í—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã ‚Äì –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 4‚Äì5 –ø—É–Ω–∫—Ç–æ–≤.
        3. üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –∏ –¥–µ–Ω—å–≥–∏ ‚Äì 5‚Äì7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ñ–µ—Ä–∞—Ö –∏ —Å—Ç–∏–ª–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.
        4. ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏ ‚Äì 4‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Å–æ–≤–µ—Ç–æ–º, –∫–∞–∫ –∏—Ö –æ–±—Ö–æ–¥–∏—Ç—å.
        5. üõ† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äì 5‚Äì7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
        –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –∞–±–∑–∞—Ü ¬´–ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ¬ª. –ù–∏–∫–∞–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ¬´–∑–∞–∫–ª—é—á–µ–Ω–∏–µ¬ª.
    """)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ command /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id

    # ensure user row exists
    if not supabase.table("users").select("id").eq("tg_id", tg_id).execute().data:
        supabase.table("users").insert({"tg_id": tg_id, "name": user.first_name}).execute()

    greeting = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø CosmoAstro ‚Äî —Ç–≤–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é: —Ç–µ–±–µ —Å–∞–º–æ–º—É üåå\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚ú® –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "üåô –£–∑–Ω–∞–≤–∞—Ç—å, –∫–∞–∫ –ª—É–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–π –¥–µ–Ω—å\n"
        "ü™ê –ü–æ–Ω—è—Ç—å, –≤ –∫–∞–∫–∏–µ –¥–Ω–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –∞ –≤ –∫–∞–∫–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–±—ã—Ç—å —Å–æ–±–æ–π\n\n"
        "–í—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞."
    )
    await update.message.reply_text(greeting)
    await asyncio.sleep(5)
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –±–æ–ª—å—à–µ?\n–ù–∞–∂–º–∏ '–ì–æ—Ç–æ–≤', –∏ –º—ã –Ω–∞—á–Ω—ë–º.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîÆ –ì–æ—Ç–æ–≤")]], resize_keyboard=True)
    )
    return READY

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("1/3 ‚Äî –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=ReplyKeyboardRemove())
    return DATE

async def save_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    try:
        context.user_data["birth_date"] = datetime.strptime(txt, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: 01.03.1998")
        return DATE
    await update.message.reply_text("2/3 ‚Äî –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 03:00):")
    return TIME

async def save_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    try:
        datetime.strptime(txt, "%H:%M")
        context.user_data["birth_time"] = txt
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 03:00")
        return TIME
    await update.message.reply_text("3/3 ‚Äî –í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞")
    return LOCATION

async def save_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = [p.strip() for p in update.message.text.split(",")]
    if len(parts) < 2:
        await update.message.reply_text("–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç: –°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥ (–ø—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞)")
        return LOCATION
    country, city = parts[0], ", ".join(parts[1:])

    tg_id = update.effective_user.id
    supabase.table("users").update({
        "birth_date": str(context.user_data["birth_date"]),
        "birth_time": context.user_data["birth_time"],
        "birth_country": country,
        "birth_city": city,
    }).eq("tg_id", tg_id).execute()

    menu = ReplyKeyboardMarkup([
        ["üîÆ –ù–∞—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä"],
        ["üåô –õ—É–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"],
        ["‚ö° –≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è"],
        ["üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"],
    ], resize_keyboard=True)
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:", reply_markup=menu
    )
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ destiny card flow ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def destiny_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = (
        "–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —ç—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–µ —Å–∞–º—É—é —Å—É—Ç—å —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏: –º–∏—Å—Å–∏—é –¥—É—à–∏, –≤—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Å—Ñ–µ—Ä—ã, –≥–¥–µ —É—Å–∏–ª–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–æ—Å—Ç –∏ –¥–æ—Ö–æ–¥.\n"
        "–ó–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç —Ç—ã –ø–æ–ª—É—á–∏—à—å —è—Å–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π –∏ –æ–±—Ö–æ–¥–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏."
    )
    await update.message.reply_text(description)
    await asyncio.sleep(5)
    cta_kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="get_destiny")]])
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∫ —É—Å–ø–µ—Ö—É –∏ —Å–≤–æ–±–æ–¥–µ? –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É¬ª –∏ —É–∑–Ω–∞–π —Å–≤–æ—ë –∏—Å—Ç–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å–µ–π—á–∞—Å.",
        reply_markup=cta_kb
    )

async def destiny_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    msg = await query.message.reply_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")

    tg_id = query.from_user.id
    row = supabase.table("users").select("id,name,birth_date,birth_time,birth_country,birth_city").eq("tg_id", tg_id).execute().data[0]

    prompt = build_destiny_prompt(row)
    try:
        resp = openai.chat.completions.create(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": prompt}],
            temperature=0.9,
            max_tokens=1200,
        )
        text = resp.choices[0].message.content.strip()
    except Exception as e:
        logger.error("OpenAI error: %s", e)
        await msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # try PDF
    try:
        pdf_bytes = text_to_pdf(text)
        public_url = upload_pdf(row["id"], pdf_bytes)
        await query.message.reply_document(public_url, filename="–ö–∞—Ä—Ç–∞_–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.pdf", caption="üîÆ –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞!")
    except Exception as e:
        logger.error("PDF error ‚Üí fallback text: %s", e)
        await query.message.reply_text(f"üîÆ –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞:\n\n{text}")

    await msg.delete()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ init & handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    app = ApplicationBuilder().token(TG_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            READY: [MessageHandler(filters.Regex("^

