import os
import logging
import asyncio
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from openai import OpenAI
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_BIRTH, ASK_TIME, ASK_LOCATION = range(3)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id
    name = user.first_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Supabase
    existing = supabase.table("users").select("id").eq("tg_id", tg_id).execute()
    if not existing.data:
        supabase.table("users").insert({"tg_id": tg_id, "name": name}).execute()

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CosmoAstro ‚Äî —Ç–≤–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é: —Ç–µ–±–µ —Å–∞–º–æ–º—É üåå\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚ú® –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "üåô –£–∑–Ω–∞–≤–∞—Ç—å, –∫–∞–∫ –ª—É–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–π –¥–µ–Ω—å\n"
        "ü™ê –ü–æ–Ω—è—Ç—å, –≤ –∫–∞–∫–∏–µ –¥–Ω–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –∞ –≤ –∫–∞–∫–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–±—ã—Ç—å —Å–æ–±–æ–π\n\n"
        "–í—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞."
    )

    await asyncio.sleep(5)

    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –±–æ–ª—å—à–µ?\n–ù–∞–∂–º–∏ '–ì–æ—Ç–æ–≤', –∏ –º—ã –Ω–∞—á–Ω—ë–º.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîÆ –ì–æ—Ç–æ–≤")]], resize_keyboard=True)
    )
    return ASK_BIRTH

# –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
async def ask_birth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "üîÆ –ì–æ—Ç–æ–≤":
        await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üîÆ –ì–æ—Ç–æ–≤', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")
        return ASK_BIRTH

    await update.message.reply_text("1/3 ‚Äî –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=ReplyKeyboardRemove())
    return ASK_TIME

# –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    try:
        birth_date = datetime.strptime(user_input, "%d.%m.%Y").date()
        context.user_data["birth_date"] = birth_date
        await update.message.reply_text("2/3 ‚Äî –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 03:00):")
        return ASK_LOCATION
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ç–∞–∫: 01.03.1998")
        return ASK_TIME

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ (–≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birth_location"] = update.message.text.strip()
    user = update.effective_user

    location_parts = context.user_data["birth_location"].split(",")
    country = location_parts[-1].strip() if len(location_parts) > 1 else ""
    city = location_parts[0].strip()

    supabase.table("users").update({
        "birth_date": str(context.user_data["birth_date"]),
        "birth_time": "03:00",  # –≤—Ä–µ–º–µ–Ω–Ω–æ –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–æ –¥–ª—è MVP
        "birth_country": country,
        "birth_city": city
    }).eq("tg_id", user.id).execute()

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –º—ã –º–æ–∂–µ–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É–¥–∞ –±–æ–ª—å—à–µ, —á–µ–º —Ç—ã —Å–∞–º –æ —Å–µ–±–µ –∑–Ω–∞–µ—à—å.\n\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup([
            ["üîÆ –ù–∞—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä"],
            ["üåô –õ—É–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"],
            ["‚ö° –≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è"]
        ], resize_keyboard=True)
    )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TG_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_BIRTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birth)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            ASK_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_location)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    logger.info("Bot started")
    app.run_polling()

