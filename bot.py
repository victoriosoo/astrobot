import os
import logging
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from openai import OpenAI
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_BIRTH, ASK_SIGN = range(2)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id
    name = user.first_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Supabase
    existing = supabase.table("users").select("id").eq("tg_id", tg_id).execute()
    if not existing.data:
        supabase.table("users").insert({
            "tg_id": tg_id,
            "name": name
        }).execute()

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CosmoAstro ü™ê\n"
        "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    return ASK_BIRTH

# –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
async def ask_birth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    try:
        birth_date = datetime.strptime(user_input, "%d.%m.%Y").date()
        context.user_data["birth_date"] = birth_date
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–µ–≤, –†—ã–±—ã –∏ —Ç.–¥.):")
        return ASK_SIGN
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ç–∞–∫: 01.03.1998")
        return ASK_BIRTH

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–∫
async def ask_sign(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sign = update.message.text.strip().capitalize()
    birth_date = context.user_data.get("birth_date")
    user = update.effective_user

    supabase.table("users").update({
        "birth_date": str(birth_date),
        "zodiac_sign": sign
    }).eq("tg_id", user.id).execute()

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω. –¢—ã ‚Äî {sign}, —Ä–æ–¥–∏–ª—Å—è {birth_date.strftime('%d.%m.%Y')} ‚òÄÔ∏è"
    )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TG_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_BIRTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birth)],
            ASK_SIGN: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_sign)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    logger.info("Bot started")
    app.run_polling()
