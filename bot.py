import os
import logging
import asyncio
from datetime import datetime
from textwrap import dedent

from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardRemove,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    constants,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from supabase import create_client, Client
from openai import OpenAI

# ---------- ENV & INIT ----------
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
openai = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- STATES ----------
READY, DATE, TIME, LOCATION = range(4)

# ---------- /start ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id
    name = user.first_name

    # Ensure user row exists
    if not supabase.table("users").select("id").eq("tg_id", tg_id).execute().data:
        supabase.table("users").insert({"tg_id": tg_id, "name": name}).execute()

    await update.message.reply_text(
        dedent(
            """
            –ü—Ä–∏–≤–µ—Ç! –Ø CosmoAstro ‚Äî —Ç–≤–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é: —Ç–µ–±–µ —Å–∞–º–æ–º—É üåå

            –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
            ‚ú® –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            üåô –£–∑–Ω–∞–≤–∞—Ç—å, –∫–∞–∫ –ª—É–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–π –¥–µ–Ω—å
            ü™ê –ü–æ–Ω—è—Ç—å, –≤ –∫–∞–∫–∏–µ –¥–Ω–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –∞ –≤ –∫–∞–∫–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–±—ã—Ç—å —Å–æ–±–æ–π

            –í—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞.
            """
        )
    )

    await asyncio.sleep(5)

    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –±–æ–ª—å—à–µ?\n–ù–∞–∂–º–∏ '–ì–æ—Ç–æ–≤', –∏ –º—ã –Ω–∞—á–Ω—ë–º.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîÆ –ì–æ—Ç–æ–≤")]], resize_keyboard=True)
    )
    return READY

# ---------- PROFILE QUESTIONS ----------
async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "üîÆ –ì–æ—Ç–æ–≤":
        return READY
    await update.message.reply_text("1/3 ‚Äî –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove())
    return DATE

async def save_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        birth_date = datetime.strptime(update.message.text.strip(), "%d.%m.%Y").date()
        context.user_data["birth_date"] = birth_date
        await update.message.reply_text("2/3 ‚Äî –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú):")
        return TIME
    except ValueError:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: 01.03.1998")
        return DATE

async def save_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        datetime.strptime(update.message.text.strip(), "%H:%M").time()
        context.user_data["birth_time"] = update.message.text.strip()
        await update.message.reply_text("3/3 ‚Äî –í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞")
        return LOCATION
    except ValueError:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: 03:00")
        return TIME

async def save_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location_raw = update.message.text.strip()
    parts = [p.strip() for p in location_raw.split(",")]
    if len(parts) < 2:
        await update.message.reply_text("–ù—É–∂–Ω–æ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ‚Äî —Å—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞")
        return LOCATION

    country, city = parts[0], parts[1]
    user = update.effective_user

    supabase.table("users").update({
        "birth_date": str(context.user_data["birth_date"]),
        "birth_time": context.user_data["birth_time"],
        "birth_country": country,
        "birth_city": city,
    }).eq("tg_id", user.id).execute()

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup([
            ["üîÆ –ù–∞—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä"],
            ["üåô –õ—É–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"],
            ["‚ö° –≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è"],
            ["üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"],
        ], resize_keyboard=True)
    )
    return ConversationHandler.END

# ---------- PRODUCTS FLOW ----------
async def products_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è":
        await show_destiny_description(update, context)

async def show_destiny_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    desc = (
        "–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —ç—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–µ —Å–∞–º—É—é —Å—É—Ç—å –≤–∞—à–µ–≥–æ –ø—É—Ç–∏: –º–∏—Å—Å–∏—é –¥—É—à–∏, –≤—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Å—Ñ–µ—Ä—ã, –≥–¥–µ —É—Å–∏–ª–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–æ—Å—Ç –∏ –¥–æ—Ö–æ–¥. "
        "–ó–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —è—Å–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π –∏ –æ–±—Ö–æ–¥–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏."
    )
    await update.message.reply_text(desc)
    await asyncio.sleep(5)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="get_destiny")]
    ])
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∫ —É—Å–ø–µ—Ö—É –∏ —Å–≤–æ–±–æ–¥–µ? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —É–∑–Ω–∞–π —Å–≤–æ—ë –∏—Å—Ç–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å–µ–π—á–∞—Å.",
        reply_markup=keyboard,
    )

async def destiny_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    user_row = supabase.table("users").select("name, birth_date, birth_time, birth_country, birth_city, id").eq("tg_id", user.id).execute().data[0]
    # Prompt building
    prompt_system = "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥. –û–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω–æ, –±–µ–∑ –∂–∞—Ä–≥–æ–Ω–∞, –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ, –Ω–∞ ‚Äò—Ç—ã‚Äô. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –∏ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —ç—Ç–æ ‚Äò–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç‚Äô."
    prompt_user = dedent(
        f"""–î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
–ò–º—è: {user_row['name'] or '–î—Ä—É–≥'}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_row['birth_date']}
–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {user_row['birth_time']}
–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_row['birth_city']}, {user_row['birth_country']}

–°–æ—Å—Ç–∞–≤—å ¬´–ö–∞—Ä—Ç—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è¬ª (~350‚Äì450 —Å–ª–æ–≤). –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. üéØ –ú–∏—Å—Å–∏—è –¥—É—à–∏ ‚Äì 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
2. üíé –í—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã ‚Äì –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 3‚Äì4 –ø—É–Ω–∫—Ç–æ–≤.
3. üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –∏ –¥–µ–Ω—å–≥–∏ ‚Äì –∞–±–∑–∞—Ü –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ñ–µ—Ä–∞—Ö –∏ —Å—Ç–∏–ª–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.
4. ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏ ‚Äì 2 –ø—É–Ω–∫—Ç–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Å–æ–≤–µ—Ç–æ–º, –∫–∞–∫ –∏—Ö –æ–±—Ö–æ–¥–∏—Ç—å.
5. üõ† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äì 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞.

–ù–∏–∫–∞–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ ¬´–∑–∞–∫–ª—é—á–µ–Ω–∏–µ¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–≤–µ—Ç–æ–º."""
    )

    completion = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "system", "content": prompt_system}, {"role": "user", "content": prompt_user}],
        temperature=0.8,
        max_tokens=800,
    )
    report_text = completion.choices[0].message.content.strip()

    await query.edit_message_text(
        f"üîÆ *–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞*:\n\n{report_text}",
        parse_mode=constants.ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )

# ---------- CANCEL ----------
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏ /start, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ---------- MAIN ----------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TG_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            READY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_time)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_location)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    # Router for main menu buttons
    app.add_handler(MessageHandler(filters.Regex("üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"), products_router))
    app.add_handler(CallbackQueryHandler(destiny_callback, pattern="^get_destiny$"))

    logger.info("Bot started")
    app.run_polling()

