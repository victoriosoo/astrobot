import os
import io
import logging
import asyncio
import time
from datetime import datetime
from textwrap import wrap

from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardRemove,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ—Å–ª–µ import-–æ–≤, –ü–ï–†–ï–î create_client ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import pprint, os
pprint.pprint({k: v for k, v in os.environ.items() if k.startswith("SUPABASE")})
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from supabase import create_client, Client
from openai import OpenAI

from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_LEFT
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

FONT_PATH = os.path.join(os.path.dirname(__file__), "DejaVuSans.ttf")
pdfmetrics.registerFont(TTFont("DejaVuSans", FONT_PATH))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ env / logger ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = (
    os.getenv("SUPABASE_KEY") or
    os.getenv("SUPABASE_SERVICE_ROLE_KEY")
)
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ conversation states ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
READY, DATE, TIME, LOCATION = range(4)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def text_to_pdf(text: str) -> bytes:
    buf = io.BytesIO()

    # —Å–æ–∑–¥–∞—ë–º PDF-–¥–æ–∫—É–º–µ–Ω—Ç
    doc = SimpleDocTemplate(buf, pagesize=A4, leftMargin=40, rightMargin=40, topMargin=50, bottomMargin=50)

    # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª—å —Å–æ —à—Ä–∏—Ñ—Ç–æ–º
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(
        name='Body',
        fontName='DejaVuSans',
        fontSize=12,
        leading=16,
        spaceAfter=10,
        alignment=TA_LEFT
    ))

    story = []

    # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º (–∞–±–∑–∞—Ü—ã)
    for block in text.strip().split('\n\n'):
        story.append(Paragraph(block.replace("\n", "<br/>"), styles["Body"]))
        story.append(Spacer(1, 8))

    doc.build(story)
    return buf.getvalue()
def upload_pdf_to_storage(user_id: str, pdf_bytes: bytes) -> str:
    bucket = supabase.storage.from_("destiny-reports")
    fname = f"{user_id}_{int(time.time())}.pdf"
    bucket.upload(fname, pdf_bytes)
    return bucket.get_public_url(fname)

def build_destiny_prompt(name, date, time_str, city, country) -> list[dict]:
    """Return messages payload for chat completions."""
    sys = (
        "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥. –û–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞ ¬´—Ç—ã¬ª. "
        "–ù–µ —É–ø–æ–º–∏–Ω–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ —á—Ç–æ —Ç—ã –ò–ò."
    )
    user = f"""–î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
–ò–º—è: {name}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date}
–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_str}
–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {city}, {country}

–°–æ—Å—Ç–∞–≤—å ¬´–ö–∞—Ä—Ç—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è¬ª (650‚Äì800 —Å–ª–æ–≤).

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. üéØ –ú–∏—Å—Å–∏—è –¥—É—à–∏ ‚Äì 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
2. üíé –í—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã ‚Äì –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ 4-5 –ø—É–Ω–∫—Ç–æ–≤.
3. üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –∏ –¥–µ–Ω—å–≥–∏ ‚Äì 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
4. ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏ ‚Äì 4-5 –ø—É–Ω–∫—Ç–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Å–æ–≤–µ—Ç–æ–º.
5. üõ† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äì 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞.

–ó–∞–≤–µ—Ä—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–≤–µ—Ç–æ–º + –¥–æ–±–∞–≤—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–±–∑–∞—Ü ¬´–ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ¬ª.
"""
    return [{"role": "system", "content": sys}, {"role": "user", "content": user}]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start flow ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id
    name = user.first_name

    # ensure user row exists
    if not supabase.table("users").select("id").eq("tg_id", tg_id).execute().data:
        supabase.table("users").insert({"tg_id": tg_id, "name": name}).execute()

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CosmoAstro ‚Äî —Ç–≤–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä üåå\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚ú® –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É\n"
        "üåô –£–∑–Ω–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –ª—É–Ω—ã\n"
        "ü™ê –ü–æ–Ω—è—Ç—å –¥–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—Ç–¥—ã—Ö–∞\n\n"
        "–í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞."
    )
    await asyncio.sleep(5)

    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –±–æ–ª—å—à–µ?\n–ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤¬ª, –∏ –º—ã –Ω–∞—á–Ω—ë–º.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîÆ –ì–æ—Ç–æ–≤")]], resize_keyboard=True),
    )
    return READY

async def ask_birth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "üîÆ –ì–æ—Ç–æ–≤":
        return READY
    await update.message.reply_text("1/3 ‚Äî –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove())
    return DATE

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        birth_date = datetime.strptime(update.message.text.strip(), "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 02.03.1998")
        return DATE
    context.user_data["birth_date"] = birth_date
    await update.message.reply_text("2/3 ‚Äî –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú):")
    return TIME

async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        birth_time = datetime.strptime(update.message.text.strip(), "%H:%M").time()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 03:00")
        return TIME
    context.user_data["birth_time"] = birth_time
    await update.message.reply_text("3/3 ‚Äî –í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞):")
    return LOCATION

async def save_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = [p.strip() for p in update.message.text.split(",")]
    if len(parts) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: –õ–∞—Ç–≤–∏—è, –†–∏–≥–∞")
        return LOCATION

    country, city = parts[0], parts[1]
    user = update.effective_user
    supabase.table("users").update(
        {
            "birth_date": str(context.user_data["birth_date"]),
            "birth_time": context.user_data["birth_time"].strftime("%H:%M"),
            "birth_country": country,
            "birth_city": city,
        }
    ).eq("tg_id", user.id).execute()

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
        reply_markup=ReplyKeyboardMarkup(
            [["üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"]], resize_keyboard=True
        ),
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ destiny card flow ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def destiny_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ —Ç–≤–æ–µ–π –º–∏—Å—Å–∏–∏, —Ç–∞–ª–∞–Ω—Ç–∞—Ö "
        "–∏ —Å—Ñ–µ—Ä–∞—Ö —Ä–æ—Å—Ç–∞. –ü–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π.\n\n"
        "–ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É."
    )
    await asyncio.sleep(5)
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –∫ —É—Å–ø–µ—Ö—É –∏ —Å–≤–æ–±–æ–¥–µ?\n"
        "–ù–∞–∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É¬ª!",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="destiny_card")]]
        ),
    )

async def destiny_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")

    tg_id = query.from_user.id
    user_res = supabase.table("users").select("*").eq("tg_id", tg_id).execute()
    if not user_res.data:
        await query.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–æ–π–¥–∏ /start.")
        return
    u = user_res.data[0]

    # build prompt & call GPT
    messages = build_destiny_prompt(
        name=u.get("name", "–î—Ä—É–≥"),
        date=datetime.strptime(u["birth_date"], "%Y-%m-%d").strftime("%d.%m.%Y"),
        time_str=u["birth_time"],
        city=u["birth_city"],
        country=u["birth_country"],
    )
    try:
        resp = OPENAI.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages,
            max_tokens=1100,
            temperature=0.9,
        )
        report_text = resp.choices[0].message.content.strip()
    except Exception as e:
        logger.error("GPT error: %s", e)
        await query.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # generate PDF -> upload -> send
    try:
        pdf_bytes = text_to_pdf(report_text)
        public_url = upload_pdf_to_storage(u["id"], pdf_bytes)
        await query.message.reply_document(
            document=public_url,
            filename="Karta_Prednaznacheniya.pdf",
            caption="üîÆ –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞!",
        )
    except Exception as e:
        logger.error("PDF/upload error: %s", e)
        await query.message.reply_text(
            "–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞, –Ω–æ —Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª—Å—è üòî. –í–æ—Ç —Ç–µ–∫—Å—Ç:\n\n" + report_text
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ launch ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    app = ApplicationBuilder().token(TG_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            READY: [MessageHandler(filters.Regex(r"^üîÆ –ì–æ—Ç–æ–≤$"), ask_birth)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_location)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_profile)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex(r"^üìú –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è$"), destiny_product))
    app.add_handler(CallbackQueryHandler(destiny_card_callback, pattern=r"^destiny_card$"))

    logger.info("Bot started")
    app.run_polling()


