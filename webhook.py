# webhook.py
import os
from dotenv import load_dotenv
load_dotenv()

from flask import Flask, request
import stripe
import requests
from datetime import datetime

from supabase_client import update_user, get_user
from prompts import build_destiny_prompt
from openai_client import ask_gpt
from pdf_generator import text_to_pdf, upload_pdf_to_storage

app = Flask(__name__)
stripe.api_key = os.getenv("STRIPE_SECRET_KEY")
WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∫–ª—é—á -> –ø–æ–ª–µ –≤ Supabase)
PRODUCTS = {
    "destiny": "paid_destiny",
    "solar": "paid_solar",
    "career": "paid_career",
    # –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

def send_start_message(tg_id, product_type):
    names = {
        "destiny": "–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
        "solar": "–ì–æ–¥–æ–≤–æ–π –ø—É—Ç—å (—Å–æ–ª—è—Ä)",
        "career": "–î–æ—Ö–æ–¥/–∫–∞—Ä—å–µ—Ä–∞",
        # –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
    }
    prod_name = names.get(product_type, "–í–∞—à PDF-–ø—Ä–æ–¥—É–∫—Ç")
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    text = (
        f"–û–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç ¬´{prod_name}¬ª –ø–æ–ª—É—á–µ–Ω–∞! –Ø –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—á—ë—Ç –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Ñ–∞–π–ª–∞ üåå\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –ø—Ä–∏—à–ª—é PDF –ø—Ä—è–º–æ —Å—é–¥–∞!"
    )
    requests.post(url, data={"chat_id": tg_id, "text": text})

def send_pdf_to_user(tg_id, product_type):
    user_list = get_user(tg_id)
    if not user_list:
        return
    u = user_list[0]

    # –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ–º–ø—Ç –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–¥ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    if product_type == "destiny":
        # build prompt & call GPT –¥–ª—è destiny
        try:
            messages = build_destiny_prompt(
                name=u.get("name", "–î—Ä—É–≥"),
                date=datetime.strptime(u["birth_date"], "%Y-%m-%d").strftime("%d.%m.%Y"),
                time_str=u["birth_time"],
                city=u["birth_city"],
                country=u["birth_country"],
            )
            report_text = ask_gpt(
                messages,
                model="gpt-4-turbo",
                max_tokens=2500,
                temperature=0.9,
            )
        except Exception as e:
            print(f"GPT error: {e}")
            return

        try:
            pdf_bytes = text_to_pdf(report_text)
            public_url = upload_pdf_to_storage(u["id"], pdf_bytes)
            user_name = u.get("name", "user").replace(" ", "_")
            birth_date = u.get("birth_date", "")
            nice_filename = f"Karta_Prednaznacheniya_{user_name}_{birth_date}.pdf"

            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
            caption = (
                "–ì–æ—Ç–æ–≤–æ! –Ø —Å–æ–±—Ä–∞–ª–∞ —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É üîÆ\n"
                "–í–æ—Ç —Ç–≤–æ—è –ö–∞—Ä—Ç–∞ –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –æ —Ç–æ–º, –≥–¥–µ —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, "
                "–Ω–∞ —á—ë–º —Å—Ç–æ–∏—Ç —Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏ —á–µ–≥–æ –ª—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å.\n\n"
                "–í–ø–µ—Ä—ë–¥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è!"
            )
            data = {
                "chat_id": tg_id,
                "document": public_url,
                "caption": caption,
                "filename": nice_filename
            }
            requests.post(url, data=data)
        except Exception as e:
            print(f"PDF/upload error: {e}")

    elif product_type == "solar":
        # –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è "—Å–æ–ª—è—Ä" ‚Äî –≤—Å—Ç–∞–≤—å —Å–≤–æ—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        pass

    elif product_type == "career":
        # –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è "–∫–∞—Ä—å–µ—Ä–∞" ‚Äî –≤—Å—Ç–∞–≤—å —Å–≤–æ—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        pass

    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {product_type}")

@app.route("/stripe/webhook", methods=["POST"])
def stripe_webhook():
    payload = request.data
    sig_header = request.headers.get("stripe-signature")
    try:
        event = stripe.Webhook.construct_event(payload, sig_header, WEBHOOK_SECRET)
    except Exception as e:
        print("Webhook signature error:", e)
        return str(e), 400

    if event["type"] == "checkout.session.completed":
        session = event["data"]["object"]
        tg_id = session["metadata"]["tg_id"]
        product_type = session["metadata"].get("product_type", "destiny")
        paid_field = PRODUCTS.get(product_type, "paid_destiny")
        update_user(tg_id, **{paid_field: True})
        send_start_message(tg_id, product_type)
        send_pdf_to_user(tg_id, product_type)
    return "", 200

if __name__ == "__main__":
    app.run(port=5000)